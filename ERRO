for x in sinais:

    timeframe_retorno = Timeframe(x.split(';')[0])
    timeframe = 0 if (timeframe_retorno == 'error') else timeframe_retorno
    par = x.split(';')[1].upper()
    minutos_lista = x.split(';')[2]
    direcao = x.split(';')[3].lower().replace('\n', '')
    mensagem_paridade = f'EM ESPERA: {par} | TEMPO: {str(timeframe)}M | HORA: {str(minutos_lista)} | DIREÇÃO: {direcao}'
    Mensagem(mensagem_paridade)
    opcao = 'error'
    # print(par)
    verf = False
    while True:
        t = timestamp_converter()

        if minutos_lista < t:
            break

        s = minutos_lista
        f = '%H:%M:%S'
        dif = abs((datetime.strptime(t, f) - datetime.strptime(s, f)).total_seconds())
        # print('Agora: ',t)
        # print('Falta: ',dif)

        # Verifica se tem noticias 40 seg antes
        if noticias == 'S':
            if dif == 40:
                impacto, moeda, hora, stts = noticas(par)
                if stts:
                    Mensagem(f' NOTÍCIA COM IMPACTO DE {impacto} TOUROS NA MOEDA {moeda} ÀS {hora}!')
                    break

        # Verifica opção binário ou digita quando falta 25 seg
        if dif == 25:
            opcao = checkProfit(par, timeframe)

        # Verifica tendencia quando falta 5 seg
        if analisarTendencia == 'S':
            if dif == 5:
                if verf == False:
                    tend = tendencia(par, timeframe)
                    verf = True
                    if tend == False:
                        Mensagem(f' ATIVO {par} COM TENDÊNCIA DE LATERIZAÇÃO!')
                    else:
                        if tend != direcao:
                            Mensagem(f'\n ATIVO {par} CONTRA TENDÊNCIA\n')
                            break

        #Inicia a operação 2 seg antes
        entrar = True if (dif == 2) else False

        if entrar:
            Mensagem('\n\n INICIANDO OPERAÇÃO..')
            dir = False
            dir = direcao

            if dir:
                mensagem_operacao = f'ATIVO: {par} | OPÇÃO: {opcao} | HORA: {str(minutos_lista)} | DIREÇÃO: {dir}'
                Mensagem(mensagem_operacao)
                valor_entrada = valor_entrada_b
                opcao = 'binaria' if (opcao == 60) else opcao
                resultado, lucro, stop = entradas(par, valor_entrada, dir, config, opcao, timeframe)
                lucroTotal += lucro
                mensagem_resultado = f' RESULTADO ->  {resultado} | R${str(lucro)}\n Lucro: R${str(round(lucroTotal, 2))}\n'
                Mensagem(mensagem_resultado)

                # print(resultado)
                if resultado == 'error':
                    break

                if resultado == 'win' or resultado == 'doji':
                    break

                if stop:
                    mensagem_stop = f'\nStop {resultado.upper()} batido!'
                    Mensagem(mensagem_stop)
                    sys.exit()

                if resultado == 'loss' and config['martingale'] == 'S':
                    valor_entrada = Martingale(float(valor_entrada))
                    for i in range(int(config['niveis']) if int(config['niveis']) > 0 else 1):

                        mensagem_martingale = f' MARTINGALE NIVEL {str(i+1)}..'
                        Mensagem(mensagem_martingale)
                        resultado, lucro, stop = entradas(par, valor_entrada, dir, config, opcao, timeframe)
                        lucroTotal += lucro
                        mensagem_resultado_martingale = f' RESULTADO ->  {resultado} | R${str(lucro)}\n Lucro: R${str(round(lucroTotal, 2))}\n'
                        Mensagem(mensagem_resultado_martingale)

                        if stop:
                            mensagem_stop = f'\nStop {resultado.upper()} batido!'
                            Mensagem(mensagem_stop)
                            sys.exit()

                        if resultado == 'win' or resultado == 'doji':
                            #print('\n')
                            break
                        else:
                            valor_entrada = Martingale(float(valor_entrada))
                    break
                else:
                    break
        time.sleep(0.1)
    # break
Mensagem(' Lista de sinais finalizada!')
banca_att = banca()
Mensagem(f' Banca: R${banca_att}')
Mensagem(f' Lucro: R${str(round(lucroTotal, 2))}')
sys.exit()
